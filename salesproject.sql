--CUSTOMENRS AND PRODUCTS ANALYSIS USING SQL

--Displaying the first five lines from the products table.
SELECT *
FROM products 
LIMIT 5;

--Counting lines in the products table
SELECT COUNT(*)
FROM products;

--EXPLORING THE DATABASE
--Description of Tables and Relationships:

-- Customers: Contains information about customers such as name, contact details, and address.
-- Linked to Orders via the customerNumber.

-- Employees: Contains details about employees such as employee number, name, job title, and office.
-- Linked to Offices via the officeCode. Also linked to itself for hierarchy (managerEmployeeNumber).

-- Offices: Contains details about sales offices including office location and contact info.
-- Linked to Employees via the officeCode.

-- Orders: Contains information about customer orders including order date, status, and related customer.
-- Linked to Customers via the customerNumber. Linked to OrderDetails via the orderNumber.

-- OrderDetails: Contains individual line items for each order, such as product details and quantities.
-- Linked to Orders via the orderNumber. Linked to Products via the productCode.

-- Payments: Contains payment records for customers including payment date and amount.
-- Linked to Customers via the customerNumber.

-- Products: Contains details about the products such as name, scale, vendor, and price.
-- Linked to ProductLines via the productLine. Linked to OrderDetails via the productCode.

-- ProductLines: Contains categories of products such as "Classic Cars" or "Motorcycles."
-- Linked to Products via the productLine.


-- Query to display table information(table_name, number_of_attributes, number_of_rows):

SELECT 'Customers' AS table_name, COUNT(*) AS number_of_attributes, 
       (SELECT COUNT(*) FROM Customers) AS number_of_rows
FROM pragma_table_info('Customers')

UNION ALL

SELECT 'Products', COUNT(*), (SELECT COUNT(*) FROM Products)
FROM pragma_table_info('Products')

UNION ALL

SELECT 'ProductLines', COUNT(*), (SELECT COUNT(*) FROM ProductLines)
FROM pragma_table_info('ProductLines')

UNION ALL

SELECT 'Orders', COUNT(*), (SELECT COUNT(*) FROM Orders)
FROM pragma_table_info('Orders')

UNION ALL

SELECT 'OrderDetails', COUNT(*), (SELECT COUNT(*) FROM OrderDetails)
FROM pragma_table_info('OrderDetails')

UNION ALL

SELECT 'Payments', COUNT(*), (SELECT COUNT(*) FROM Payments)
FROM pragma_table_info('Payments')

UNION ALL

SELECT 'Employees', COUNT(*), (SELECT COUNT(*) FROM Employees)
FROM pragma_table_info('Employees')

UNION ALL

SELECT 'Offices', COUNT(*), (SELECT COUNT(*) FROM Offices)
FROM pragma_table_info('Offices');


 --Question 1: Which Products Should We Order More of or Less of?
--Write a query to compute the low stock for each product using a correlated subquery.
-- Query to compute low stock for each product:
WITH lowStock AS (
    SELECT 
        p.productCode,
        ROUND(
            (SELECT SUM(od.quantityOrdered) 
             FROM OrderDetails AS od 
             WHERE od.productCode = p.productCode) / p.quantityInStock, 
            2
        ) AS low_stock_rate
    FROM Products AS p
    GROUP BY p.productCode
    ORDER BY low_stock_rate DESC
    LIMIT 10
),

--Write a query to compute the product performance for each product.
ProductPerformance AS (
    SELECT 
        od.productCode,
        ROUND(SUM(od.quantityOrdered * od.priceEach), 2) AS total_sales
    FROM OrderDetails od
    GROUP BY od.productCode
   ORDER BY total_sales DESC
    LIMIT 10
)

-- Query to combine the results and display priority products for restocking:
SELECT DISTINCT 
    p.productCode,
    ls.low_stock_rate,
    pp.total_sales
FROM Products p
JOIN lowStock AS ls ON p.productCode = ls.productCode
JOIN ProductPerformance AS pp ON p.productCode = pp.productCode
WHERE p.productCode IN (
    SELECT productCode FROM lowStock
    INTERSECT
    SELECT productCode FROM ProductPerformance
)
ORDER BY ls.low_stock_rate DESC, pp.total_sales DESC;

--Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?

--a query to join the products, orders, and orderdetails tables to have customers and products information in the same place.
-- compute profit generated by each customer:
SELECT 
    c.customerNumber,
    c.customerName,
    ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS total_profit
FROM Customers AS c
JOIN Orders AS o ON c.customerNumber = o.customerNumber
JOIN OrderDetails AS od ON o.orderNumber = od.orderNumber
JOIN Products AS p ON od.productCode = p.productCode
GROUP BY c.customerNumber, c.customerName
ORDER BY total_profit DESC;

--Finding the VIP and Less Engaged Customers

--Write a query to find the top five VIP customers.
WITH CustomerProfit AS(
    SELECT 
    c.customerNumber,
    c.customerName,
        ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS total_profit
    FROM Customers AS c
    JOIN Orders AS o ON c.customerNumber = o.customerNumber
    JOIN OrderDetails AS od ON o.orderNumber = od.orderNumber
    JOIN Products AS p ON od.productCode = p.productCode
    GROUP BY c.customerNumber, c.customerName
    ORDER BY total_profit DESC
)

-- Query to find the top five VIP customers:
SELECT 
    c.contactLastName,
    c.contactFirstName,
    c.city,
    c.country,
    ROUND(cp.total_profit, 2) AS profit
FROM CustomerProfit AS cp
JOIN customers AS c ON cp.customerNumber = c.customerNumber
ORDER BY cp.total_profit DESC
LIMIT 5;

-- Query to find the 5 least engaged customers:
WITH CustomerProfit AS(
    SELECT 
    c.customerNumber,
    c.customerName,
        ROUND(SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)), 2) AS total_profit
    FROM Customers AS c
    JOIN Orders AS o ON c.customerNumber = o.customerNumber
    JOIN OrderDetails AS od ON o.orderNumber = od.orderNumber
    JOIN Products AS p ON od.productCode = p.productCode
    GROUP BY c.customerNumber, c.customerName
    ORDER BY total_profit DESC
)

SELECT 
    c.contactLastName,
    c.contactFirstName,
    c.city,
    c.country,
    ROUND(cp.total_profit, 2) AS profit
FROM CustomerProfit AS cp
JOIN customers AS c ON cp.customerNumber = c.customerNumber
ORDER BY cp.total_profit ASC
LIMIT 5;
--Question 3: How Much Can We Spend on Acquiring New Customers?

WITH 

payment_with_year_month_table AS (
SELECT *, 
       CAST(SUBSTR(paymentDate, 1,4) AS INTEGER)*100 + CAST(SUBSTR(paymentDate, 6,7) AS INTEGER) AS year_month
  FROM payments p
),

customers_by_month_table AS (
SELECT p1.year_month, COUNT(*) AS number_of_customers, SUM(p1.amount) AS total
  FROM payment_with_year_month_table p1
 GROUP BY p1.year_month
),

new_customers_by_month_table AS (
SELECT p1.year_month, 
       COUNT(DISTINCT customerNumber) AS number_of_new_customers,
       SUM(p1.amount) AS new_customer_total,
       (SELECT number_of_customers
          FROM customers_by_month_table c
        WHERE c.year_month = p1.year_month) AS number_of_customers,
       (SELECT total
          FROM customers_by_month_table c
         WHERE c.year_month = p1.year_month) AS total
  FROM payment_with_year_month_table p1
 WHERE p1.customerNumber NOT IN (SELECT customerNumber
                                   FROM payment_with_year_month_table p2
                                  WHERE p2.year_month < p1.year_month)
 GROUP BY p1.year_month
)

SELECT year_month, 
       ROUND(number_of_new_customers*100/number_of_customers,1) AS number_of_new_customers_props,
       ROUND(new_customer_total*100/total,1) AS new_customers_total_props
  FROM new_customers_by_month_table;

  
--a query to compute the average of customer profits using the CTE
-- Step 1: Use the previous CTE to calculate profit per customer
WITH CustomerProfit AS (
    SELECT 
        o.customerNumber, 
        SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
    FROM products p
    JOIN orderdetails od ON p.productCode = od.productCode
    JOIN orders o ON o.orderNumber = od.orderNumber
    GROUP BY o.customerNumber
)

-- Step 2: Calculate the average customer profit (LTV)
SELECT 
    ROUND(AVG(profit), 2) AS average_customer_profit
FROM CustomerProfit;
